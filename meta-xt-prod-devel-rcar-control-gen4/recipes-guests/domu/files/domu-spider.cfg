# =====================================================================
# DomU guest configuration
# =====================================================================

seclabel='system_u:system_r:domU_t'

# Uncomment the next two lines to pass PCI device to DomU

vpci="ecam"
pci=["01:00.0,seize=1"]

# Guest name
name = "DomU"

# Kernel image to boot
kernel = "/usr/lib/xen/boot/linux-domu"

# Kernel command line options
# You have to use line related to your boot device. Only one line can be used.
# In case boot from network      - use line with 'root=/dev/nfs' AND comment out 'disk' in domu-vdevices.cfg.
# In case boot from block device - use line with 'root=/dev/xvda1' (or 'root=/dev/vda') AND uncomment 'disk' in domu-vdevices.cfg.
# -----
# Uncomment this when using nfs as a boot device, and comment out 'disk'
#extra = "root=/dev/nfs nfsroot=192.168.1.100:/srv/domu,vers=3 ip=dhcp rw rootwait console=hvc0 cma=256M"
# Uncomment this when using block device as a boot device, and uncomment 'disk'
extra = "root=/dev/vda rw rootwait console=hvc0 cma=256M"

# Initial memory allocation (MB)
memory = 512

max_grant_frames = 512

# The virtio devices (transport, amount) described here should be aligned with
# virtio devices configured via Qemu command line at domu-create-ExecStart.sh
virtio=[ "backend=DomD, type=virtio,device, transport=pci, bdf=0000:00:01.0, grant_usage=1", "backend=DomD, type=virtio,device, transport=pci, bdf=0000:00:02.0, grant_usage=1", "backend=DomD, type=virtio,device, transport=pci, bdf=0000:00:03.0, grant_usage=1", "backend=DomD, type=virtio,device, transport=pci, bdf=0000:00:04.0, grant_usage=1", "backend=DomD, type=virtio,device, transport=pci, bdf=0000:00:05.0, grant_usage=1", "backend=DomD, type=virtio,device, transport=pci, bdf=0000:00:06.0, grant_usage=1" ]

# Number of VCPUS
vcpus = 4

on_crash = 'preserve'

tee='optee'

